<?xml version="1.0" encoding="UTF-8" standalone="yes"?>  <DATAPACKET Version="2.0"><METADATA><FIELDS><FIELD attrname="Chapter" fieldtype="i4"/><FIELD attrname="Title" fieldtype="string" WIDTH="120"/><FIELD attrname="PatternGroup" fieldtype="string" WIDTH="50"/><FIELD attrname="Patterns" fieldtype="string" WIDTH="100"/></FIELDS><PARAMS CHANGE_LOG="1 0 4 2 0 4 3 0 4 4 0 4 5 0 4 6 0 4 7 5 8 8 0 4 9 0 4 10 0 4 11 0 4 12 0 4 13 12 8 14 2 8 15 9 8 16 10 8 17 13 8"/></METADATA><ROWDATA><ROW RowState="4" Chapter="1" Title="Design Patterns Essentials"/><ROW RowState="5" Chapter="2" Title="Creational patterns - Singleton, Dependency injection, Lazy initialization, Obje" PatternGroup="Creational" Patterns="Singleton, Dependency Injection, Lazy initialization, Object pool"/><ROW RowState="4" Chapter="3" Title="Creational patterns - Factory method, Abstract factory, Prototype, Builder" PatternGroup="Creational" Patterns="Factory method, Abstract factory, Prototype, Builder"/><ROW RowState="4" Chapter="4" Title="Structural patterns - Composite, Flyweight, Marker interface, Bridge" PatternGroup="Structural" Patterns="Composite, Flyweight, Marker interface, Bridge"/><ROW RowState="5" Chapter="5" Title="Structural patterns - Adapter, Proxy, Decorator, Facade" PatternGroup="Structural" Patterns="Structural patterns - Adapter, Proxy, Decorator, Facade"/><ROW RowState="4" Chapter="6" Title="Behavioral patterns - Null object, Template method, Command, State" PatternGroup="Behavioral" Patterns="Null object, Template method, Command, State"/><ROW RowState="12" Chapter="5" Title="Structural patterns - Adapter, Proxy, Decorator, Facade" PatternGroup="Structural" Patterns="Adapter, Proxy, Decorator, Facade"/><ROW RowState="4" Chapter="7" Title="Behavioral patterns - Iterator, Visitor, Observer, Memento" PatternGroup="Behavioral" Patterns="Iterator, Visitor, Observer, Memento"/><ROW RowState="5" Chapter="8" Title="Concurrency patterns - Lock, Lock striping, Double-checked locking, Optimistic l" PatternGroup="Concurrenc" Patterns="Lock, Lock striping, Double-checked locking, Optimistic locking, Readers-writers lock"/><ROW RowState="5" Chapter="9" Title="Concurrency patterns - Thread pool, Messaging, Future, Pipeline" PatternGroup="Concurrenc" Patterns="Thread pool, Messaging, Future, Pipeline"/><ROW RowState="4" Chapter="10" Title="Designing Delphi programs" PatternGroup="" Patterns="Event programming, Actions, Form inheritance, Frames, Data modules, Live binding"/><ROW RowState="5" Chapter="11" Title="Other kinds of patterns" PatternGroup="Exception,"/><ROW RowState="13" Chapter="11" Title="Other kinds of patterns" PatternGroup="Exception, Debugging, Functional, Archit"/><ROW RowState="12" Chapter="2" Title="Creational patterns - Singleton, Dependency injection, Lazy initialization, Object pool" PatternGroup="Creational" Patterns="Singleton, Dependency Injection, Lazy initialization, Object pool"/><ROW RowState="12" Chapter="8" Title="Concurrency patterns - Lock, Lock striping, Double-checked locking, Optimistic locking, Readers-writers lock" PatternGroup="Concurrency" Patterns="Lock, Lock striping, Double-checked locking, Optimistic locking, Readers-writer"/><ROW RowState="12" Chapter="9" Title="Concurrency patterns - Thread pool, Messaging, Future, Pipeline" PatternGroup="Concurrency" Patterns="Thread pool, Messaging, Future, Pipeline"/><ROW RowState="12" Chapter="11" Title="Other kinds of patterns" PatternGroup="Exception, Debugging, Functional, Architectural"/></ROWDATA></DATAPACKET>